<!DOCTYPE html>
<html>
<head>
</head>
<body>
<span style="color: #993300;"><strong>[ 1. AngularJs</strong><strong>란 ]</strong></span>
<ul>
<li><strong>Google</strong><strong>에서 개발된 <span>Web app </span>을 위한<span> Javascript MV* Framework</span></strong></li>
<li>2009년에 구글직원인<span> Misko hevery</span>와<span> Adam abrons</span>가 공동 개발하였으며 시초는 온라인<span> JSON Storage Service</span>를 지원하는 소프트웨어로 개발되어 졌다<span>.<br /> </span>이후<span> MIT </span>라이선스를 보유하였으며<span>, Open Source </span>라이브러리로 채택되었으며<span> 2013</span>년<span> 9</span>월 기준<span>0.8 </span>버전으로 정식 출시되었다<span>.</span></li>
</ul>
<span style="color: #993300;"><strong><br />[ 2. </strong><strong>구조 ]</strong></span> <strong><br /> </strong><br /><img src="http://www.mimul.com/pebble/default/images/blog/html5/mvw.png" alt="" width="461" height="282" /><br /><br /> <br /><strong>View</strong> <br /> - <strong>Template</strong> : HTML을 구성하는 <span>DOM </span>객체<span><br /> - <strong>Presentation Logic</strong> : template</span>에 일어나는 이벤트에 대한 감지 및<span><br /> </span>디렉티브를 통해 특정<span> DOM</span>에 대한 핸들링<span>.<br /> </span>결국<span> template</span>과<span> view</span>에 대한 상호 이벤트에 대해 감지하고 핸들링하는 별도의 로직<span>.<br /> <br /> <strong>Model</strong></span> <br /> - <strong>Service </strong>: 비지니스 로직을 포함하여<span>, </span>실제 서버측과의 통신 등의 역활<span><br /> - <strong>Data </strong>: </span>데이터 부분<span><br /> <br /> <strong>Controller</strong> <br /> - $scope</span>를 통해<span> model</span>의 데이터 바인딩<span>, view</span>에 이벤트 발생시<span> model</span>로 이벤트 전달을 통해 데이터 변경 등의 역활을 한다<span>.<br /> - Model</span>의 변경 사항을<span> view</span>에 반영하는 역활도 하지만<span>, </span>이건<span> controller</span>로 설정된 범위에 자동 반영되는 사항으로 별도로 관리할 필요는 없다<span> ($watch </span>객체를 통해<span>)<br /> <br /> <strong>$scope</strong> : presentation logic</span>과 모델을 연결해 주는 객체<span>.<br /> angularJS</span>에서 가장 중요한 객체로 양방향 바인딩이 가능하게 되는 전역 객체로 볼 수 있다<span>. view</span>의 이벤트를<span> presentation logic</span>에서 감지해<span> $scope</span>객체를 통해<span> model</span>의 데이터를 변경하게되며<span>, </span>반대로<span> model</span>의 변경사항으로 데이터가 변경되면<span> $scope</span>객체의 데이터 변화를 감지해<span> presentation logic</span>에서 실제<span> view</span>를 갱신<span>. (</span>이 범위는<span> controller)<br /><br /><br /><img src="https://docs.angularjs.org/img/tutorial/tutorial_02.png" alt="" width="649" height="395" /><br /><br /></span> <br /><span style="color: #993300;"><strong>[ 3. </strong><strong>장, 단점 ]<br /><br /></strong></span><strong>장점<span><br /> - </span></strong>DOM 핸들링<span>, HTML </span>렌더링에 대한 자동화된 부분을 제공<span>. <br /> </span>이를 통해 코드의 양이 확연히 줄어들며<span>, </span>정형화된 코드 생성 가능<span>.<br /> - client</span>단에 대한<span> MV* </span>패턴을 통한 명확한 코드의 목적에 따른 분리<span><br /> - </span>화면<span> view</span>를 구성하는<span> template</span>부분과 비지니스 로직<span>(model-service </span>및<span> controller)</span>의 구분이 가능<span>.<br /> - web app </span>형태 구현에 있어 단순하며<span>, </span>빠른 개발이 가능<span>. </span>일반<span> jquery</span>를 통한 구현시의<span> script </span>코드 지옥과 같은 부분이 해소 가능<span>.<br /> - </span>양방향 데이터 바인딩<span> : </span>실제 서버측 통신 이후의 데이터에 대한 처리를 큰 고민 없이<span> view</span>와 비지니스 로직에 적용할 수 있는 측면<span>.<br /> - </span>모듈화<span> : </span>예를 들어<span> db</span>통신<span>, </span>웹서버 통신<span>, view</span>핸들링 등<span> controller </span>에 대한 모듈화가 가능하며<span>, </span>다른 모듈들과의 호환도 쉽게 가능<span>.<br /> - view </span>템플릿이 필요 없다<span>. html</span>만으로 서버 통신에 대한 데이터에 대한 노출<span>.</span><br /><span><strong><br /><br />단점<span><br /> - </span></strong>성능적인 측면<span><br /> 1. </span>전체<span> DOM</span>에 대한 갱신에 따른 성능 부하<span>.<br /> 2. </span>감지할 변수에 대한 처리가 느려질 경우<span>javascript</span>가 싱글 스레드인 특성상 전체 어플리케이션이 느려지게 된다<span>.<br /> <br /> - </span>이해도 측면<span><br /> </span>물론 학습에 의해 익숙해질 수 있으나<span>, framework</span>으로 인해<span> view / controller</span>로직에 대한 부분에 있어 코드 이해도가 한눈에 파악되지 않을 수 있다<span>.<br /> <br /> - </span>유지보수 측면<span><br /> </span>너무 뒷단에서 자동적으로 처리되는 부분은 디버깅이나 실제 데이터의 무결성 체크시에 해당 데이터에 대한 확인이 힘들게 된다<span>. </span>예를 들어 양방향 데이터 바인딩시 오류에 대해 어디서 부터 체크를 해야할지나<span>, </span>디렉티브를 통한 자동<span> view </span>감지시의 오류 디버깅 등<strong><span><br /> <br /> </span></strong><strong><br /></strong></span> <span style="color: #993300;"><strong>[ 4. </strong></span><strong><span style="color: #993300;">사용 </span><span><span style="color: #993300;">]</span><br /> <br /> </span></strong><strong>- </strong><span><a href="https://angularjs.org/"><strong>https://angularjs.org/</strong></a></span><strong><br /> </strong>- <span><a href="../angularjs/demo/data.html">http://de-php-api.fttinc.kr/~bbin/angularjs/demo/data.html</a></span><strong><br /> </strong>- <span><a href="http://blog.outsider.ne.kr/975">http://blog.outsider.ne.kr/975</a></span><br /> - <span><a href="http://tutorialzine.com/2013/08/learn-angularjs-5-examples/">http://tutorialzine.com/2013/08/learn-angularjs-5-examples/</a></span> <span><strong><br /> <br /> </strong></span>
</body>
</html>