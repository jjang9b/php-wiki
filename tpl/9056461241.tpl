<!DOCTYPE html>
<html>
<head>
</head>
<body>
<span style="color: #333333;"><strong>[ 1. AngularJs</strong><strong>란 ]</strong></span>
<ul>
<li><span style="color: #993300;">Google에서 개발된 Web app 을 위한 Javascript MV* Framework</span></li>
<li><span style="color: #333333;">2009년에 구글직원인 Misko hevery와 Adam abrons가 공동 개발하였으며 시초는 온라인 JSON Storage Service를 지원하는 소프트웨어로 개발되어 졌다.<br /> 이후 MIT 라이선스를 보유하였으며, Open Source 라이브러리로 채택되었으며 2013년 9월 기준0.8 버전으로 정식 출시되었다.</span></li>
</ul>
<span style="color: #333333;"><strong><br />[ 2. </strong><strong>구조 ]</strong> <strong><br /> </strong></span><br /><span style="color: #333333;"><img src="http://www.mimul.com/pebble/default/images/blog/html5/mvw.png" alt="" width="461" height="282" /></span><br /><br /> <br /><span style="color: #333333;"><strong>View</strong> </span><br /><span style="color: #333333;"> - <strong>Template</strong> : HTML을 구성하는 DOM 객체<br /> - <strong>Presentation Logic</strong> : template에 일어나는 이벤트에 대한 감지 및<br /> 디렉티브를 통해 특정 DOM에 대한 핸들링.<br /> 결국 template과 view에 대한 상호 이벤트에 대해 감지하고 핸들링하는 별도의 로직.<br /> <br /> <strong>Model</strong> </span><br /><span style="color: #333333;"> - <strong>Service </strong>: 비지니스 로직을 포함하여, 실제 서버측과의 통신 등의 역활<br /> - <strong>Data </strong>: 데이터 부분<br /> <br /> <strong>Controller</strong> <br /> - $scope를 통해 model의 데이터 바인딩, view에 이벤트 발생시 model로 이벤트 전달을 통해 데이터 변경 등의 역활을 한다.<br /> - Model의 변경 사항을 view에 반영하는 역활도 하지만, 이건 controller로 설정된 범위에 자동 반영되는 사항으로 별도로 관리할 필요는 없다 ($watch 객체를 통해)<br /> <br /> <strong>$scope</strong> : presentation logic과 모델을 연결해 주는 객체.<br /> <span style="color: #993300;">angularJS에서 가장 중요한 객체로 양방향 바인딩이 가능하게 되는 전역 객체</span>로 볼 수 있다. view의 이벤트를 presentation logic에서 감지해 $scope객체를 통해 model의 데이터를 변경하게되며, 반대로 model의 변경사항으로 데이터가 변경되면 $scope객체의 데이터 변화를 감지해 presentation logic에서 실제 view를 갱신. (이 범위는 controller)<br /><br /><br /><img src="https://docs.angularjs.org/img/tutorial/tutorial_02.png" alt="" width="649" height="395" /><br /><br /> </span><br /><span style="color: #333333;"><strong>[ 3. </strong><strong>장, 단점 ]<br /><br /></strong><strong>장점<br /> - </strong><span style="color: #993300;">DOM 핸들링, HTML 렌더링에 대한 자동화</span>된 부분을 제공. <br /> 이를 통해 코드의 양이 확연히 줄어들며, <span style="color: #993300;">정형화된 코드</span> 생성 가능.<br /> - <span style="color: #993300;">client단에 대한 MV* 패턴</span>을 통한 명확한 코드의 목적에 따른 분리<br /> - 화면 view를 구성하는 template부분과 비지니스 로직(model-service 및 controller)의 구분이 가능.<br /> - <span style="color: #993300;">web app 형태</span> 구현에 있어 단순하며, 빠른 개발이 가능. 일반 jquery를 통한 구현시의 script 코드 지옥과 같은 부분이 해소 가능.<br /> - <span style="color: #993300;">양방향 데이터 바인딩</span> : 실제 서버측 통신 이후의 데이터에 대한 처리를 큰 고민 없이 view와 비지니스 로직에 적용할 수 있는 측면.<br /> - 모듈화 : 예를 들어 db통신, 웹서버 통신, view핸들링 등 controller 에 대한 모듈화가 가능하며, 다른 모듈들과의 호환도 쉽게 가능.<br /> - view 템플릿이 필요 없다. html만으로 서버 통신에 대한 데이터에 대한 노출.</span><br /><span style="color: #333333;"><strong><br /><br />단점<br /> - </strong>성능적인 측면<br /> 1. 전체 DOM에 대한 갱신에 따른 성능 부하.<br /> 2. 감지할 변수에 대한 처리가 느려질 경우javascript가 싱글 스레드인 특성상 전체 어플리케이션이 느려지게 된다.<br /> <br /> - 이해도 측면<br /> 물론 학습에 의해 익숙해질 수 있으나, framework으로 인해 view / controller로직에 대한 부분에 있어 코드 이해도가 한눈에 파악되지 않을 수 있다.<br /> <br /> - 유지보수 측면<br /> 너무 뒷단에서 자동적으로 처리되는 부분은 디버깅이나 실제 데이터의 무결성 체크시에 해당 데이터에 대한 확인이 힘들게 된다. 예를 들어 양방향 데이터 바인딩시 오류에 대해 어디서 부터 체크를 해야할지나, 디렉티브를 통한 자동 view 감지시의 오류 디버깅 등<strong><br /> <br /> </strong><strong><br /></strong> <strong>[ 4. </strong><strong>사용 ]<br /> <br /> </strong><strong>- </strong><a href="https://angularjs.org/" style="color: #333333;"><strong>https://angularjs.org/</strong></a><strong><br /> </strong>- <a href="../angularjs/demo/data.html" style="color: #333333;">http://de-php-api.fttinc.kr/~bbin/angularjs/demo/data.html</a><strong><br /> </strong>- <a href="http://blog.outsider.ne.kr/975" style="color: #333333;">http://blog.outsider.ne.kr/975</a></span><br /><span style="color: #333333;"> - <a href="http://tutorialzine.com/2013/08/learn-angularjs-5-examples/" style="color: #333333;">http://tutorialzine.com/2013/08/learn-angularjs-5-examples/</a> <strong><br /> <br /> </strong></span>
</body>
</html>