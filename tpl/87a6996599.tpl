<!DOCTYPE html>
<html>
<head>
</head>
<body>
<span style="color: #993300;"><span style="color: #993300;"><strong>2. 기본기 - 쓰레드 기본 개념<br /><br /><br /></strong><span style="color: #333333;">- Thread 클래스 상속 받는 방식은 자바에서 다중상속이 불가능하기 때문에 다른 클래스를 상속 받지</span><br /><span style="color: #333333;">않는 경우에 유용</span><br /><br /><span style="color: #333333;">- Runnable 방식은 이미 상속받은 클래스를 스레드화 할 때 유용하지만 스레드 클래스를 확장하지 않으므로</span><br /><span style="color: #333333;">스레드 메서드를 사용할 수 없다는 단점이 있음.</span><br /><br /><span style="color: #333333;">- Thread.sleep 호출시 자바 스레드 스케줄러에서 run-&gt;wait로 변경될 때 예외 발생이 일어나면 InterruptedException을 던져주기 때문에 try catch 사용 필수</span><br /><br /><span style="color: #808080;"><span style="color: #333333;">- 안드로이드에선 View가 생성되면 그 View를 생성한 스레드만 해당 View에 접근 가능.</span><br /></span><br /></span></span>
<pre><code class="java">ThreadExample.java</code></pre>
<br />
<pre><code class="java">ThreadExampleView.java<br />
<br />package com.threadexample;<br /><br />import java.util.Random;<br /><br />import android.content.Context;<br />import android.graphics.BitmapFactory;<br />import android.graphics.Canvas;<br />import android.view.View;<br /><br />public class ThreadExampleView extends View {<br /><br /> public int floor_1 = 0; // 첫번째 엘리베이터의 현재 층 , 0 = 1층<br /> public int floor_2 = 0; // 두번째 엘리베이터의 현재 층 , 0 = 1층<br /> <br /> public ThreadExampleView(Context context) {<br /> super(context);<br /> <br /> // 랜덤한 속도값을 주기위한 Random 클래스생성<br /> Random rand = new Random();<br /> <br /> // 첫번째 엘리베이터를 움직이는 스레드를 생성하고 동작시킨다.<br /> ElevatorMoveThread thread_1 = new ElevatorMoveThread(this,rand.nextInt(1000));<br /> <br /> // 두번째 엘리베이터를 움직이는 기능과 스레드를 생성하고 동작시킨다.<br /> Runnable _runnable = new ElevatorMoveRunnable(this,rand.nextInt(1000));<br /> Thread thread_2 = new Thread(_runnable);<br /> <br /> // 엘리베이터 시작 속도의 격차를 줄이기위해 함께호출<br /> thread_1.start(); <br /> thread_2.start(); <br /> <br /> }<br /> <br /> @Override<br /> protected void onDraw(Canvas canvas) {<br /> // 엘리베이터 그리기<br /> // y 좌표는 (1층일때 그려주는 y 좌표) - [(현재층수) * (이미지의 높이)]<br /> canvas.drawBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.elebator),50,350-(floor_1*50),null);<br /> canvas.drawBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.elebator),200,350-(floor_2*50),null);<br /> }<br /><br />}<br /></code></pre>
<br /><br />
<pre><code class="java">ElevatorMoveThread.java<br /><br />package com.threadexample;<br /><br />import java.security.spec.InvalidKeySpecException;<br /><br />public class ElevatorMoveThread extends Thread {<br /> <br /> public ThreadExampleView m_View;<br /> public int m_speed;<br /><br /><br /> public ElevatorMoveThread(ThreadExampleView _view,int _speed){<br />&nbsp;&nbsp; m_View = _view;<br />&nbsp;&nbsp; m_speed = _speed;<br /> }<br /><br /> public void run(){<br /> &nbsp;&nbsp;// 3번 왕복<br />&nbsp;&nbsp; for(int j = 0 ; j &lt; 3 ; j++){<br />&nbsp;&nbsp;&nbsp;&nbsp; // 엘리베이터를 움직이는 동작<br />&nbsp;&nbsp;&nbsp;&nbsp; for(int i = 0 ; i &lt; 5 ; i ++){ // 올라가기<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_View.floor_1 = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_View.postInvalidate(); // 화면 갱신<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(m_speed);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {}<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp; for(int i = 4 ; i &gt;= 0 ; i --){ // 내려가기<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_View.floor_1 = i;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_View.postInvalidate(); // 화면 갱신<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(m_speed);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {}<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; }<br /> }<br />}<br /></code></pre>
</body>
</html>